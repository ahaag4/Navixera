//multi vehicle support and for companies

#include <ESP8266WiFi.h>
#include <FirebaseArduino.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <FS.h>
#include <time.h>

// === CONFIG ===
#define WIFI_SSID     "Your_WiFi_Name"
#define WIFI_PASSWORD "Your_WiFi_Password"
#define FIREBASE_HOST "svms-c0232-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "AIzaSyCn9YSO4-ksWl6JBqIcEEuLx2EJN8jMj4M"
#define USER_ID       "FiH4Cg488wPTCQsWoxd6twHQOas1" // Use same for all vehicles
#define VEHICLE_ID    "V001" // üü¢ Change for each hardware (V001, V002, ...)

#define COMPANY_NAME  "MyCompany" // üîÅ Replace with actual company key

// === HARDWARE PINS ===
#define GPS_RX D5
#define GPS_TX D6
#define MOTION_SENSOR D7
#define BUZZER D8
#define BATTERY_PIN A0

// === GLOBALS ===
SoftwareSerial gpsSerial(GPS_RX, GPS_TX);
TinyGPSPlus gps;

double latitude = 0.0, longitude = 0.0;
String alarmState = "off";
unsigned long lastLocationUpdate = 0;
unsigned long lastMotion = 0;
bool motionDetected = false;

void setup() {
  Serial.begin(9600);
  gpsSerial.begin(9600);
  pinMode(MOTION_SENSOR, INPUT);
  pinMode(BUZZER, OUTPUT);
  digitalWrite(BUZZER, LOW);

  SPIFFS.begin();
  connectWiFi();
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  configTime(19800, 0, "pool.ntp.org", "time.nist.gov"); // IST
}

void loop() {
  readGPS();
  getAlarmStatusFromFirebase();
  handleMotion();
  updateVehicleStatus();
  delay(2000);
}

// === WiFi Connect ===
void connectWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 30) {
    delay(500); Serial.print(".");
    retry++;
  }
  Serial.println(WiFi.status() == WL_CONNECTED ? "\n‚úÖ WiFi Connected" : "\n‚ùå WiFi Failed");
}

// === Read GPS ===
void readGPS() {
  while (gpsSerial.available()) {
    gps.encode(gpsSerial.read());
    if (gps.location.isUpdated()) {
      latitude = gps.location.lat();
      longitude = gps.location.lng();
      lastLocationUpdate = millis();
      Serial.printf("üìç %.6f, %.6f\n", latitude, longitude);
    }
  }
}

// === Fetch Alarm State ===
void getAlarmStatusFromFirebase() {
  if (WiFi.status() == WL_CONNECTED) {
    String path = "/users/" + String(USER_ID) + "/vehicle/companies/" + COMPANY_NAME + "/vehicle/" + VEHICLE_ID + "/alarm";
    alarmState = Firebase.getString(path);
  }
}

// === Motion Logic ===
void handleMotion() {
  if (digitalRead(MOTION_SENSOR) == HIGH) {
    motionDetected = true;
    lastMotion = millis();
    Serial.println("üö® Motion Detected");
    if (alarmState == "on" && isStopped()) {
      triggerAlarm();
    }
  } else {
    motionDetected = false;
  }
}

bool isStopped() {
  return (millis() - lastMotion > 15000); // 15s no motion
}

// === Trigger Alarm + Log ===
void triggerAlarm() {
  digitalWrite(BUZZER, HIGH);
  delay(800);
  digitalWrite(BUZZER, LOW);

  if (WiFi.status() == WL_CONNECTED) {
    String base = "/users/" + String(USER_ID) + "/vehicle/companies/" + COMPANY_NAME + "/vehicle/" + VEHICLE_ID + "/last_trigger";
    Firebase.setString(base + "/location", String(latitude, 6) + "," + String(longitude, 6));
    Firebase.setString(base + "/time", getTimestamp());
    Firebase.setString(base + "/status", "alert");
  }
}

// === Vehicle Status Update ===
void updateVehicleStatus() {
  String status;
  if (latitude == 0.0 && longitude == 0.0) {
    status = "No GPS Signal";
  } else if (WiFi.status() != WL_CONNECTED) {
    status = "Offline";
  } else if (millis() - lastMotion < 10000) {
    status = "Moving";
  } else {
    status = "Stopped";
  }

  String locStr = String(latitude, 6) + "," + String(longitude, 6);
  String timeNow = getTimestamp();
  int batteryPercent = getBatteryLevel();

  String base = "/users/" + String(USER_ID) + "/vehicle/companies/" + COMPANY_NAME + "/vehicle/" + VEHICLE_ID;

  if (WiFi.status() == WL_CONNECTED) {
    uploadOfflineLogs();

    Firebase.setFloat(base + "/current/latitude", latitude);
    Firebase.setFloat(base + "/current/longitude", longitude);
    Firebase.setString(base + "/current/location", locStr);
    Firebase.setString(base + "/current/last_active", timeNow);
    Firebase.setString(base + "/current/status", status);
    Firebase.setInt(base + "/current/battery", batteryPercent);

    FirebaseJson history;
    history.set("location", locStr);
    history.set("time", timeNow);
    Firebase.pushJSON(base + "/history", history);

    Serial.println("‚úÖ Updated Firebase");
  } else {
    saveOfflineLog(locStr, timeNow);
    Serial.println("üì¶ Saved Offline");
  }
}

// === Battery Percentage ===
int getBatteryLevel() {
  int analogVal = analogRead(BATTERY_PIN);
  float voltage = analogVal * (3.3 / 1023.0) * 2.0;
  int percent = map(voltage * 100, 330, 420, 0, 100);
  return constrain(percent, 0, 100);
}

// === Timestamp ===
String getTimestamp() {
  time_t now = time(nullptr);
  struct tm* t = localtime(&now);
  char buffer[25];
  sprintf(buffer, "%04d-%02d-%02d %02d:%02d", t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour, t->tm_min);
  return String(buffer);
}

// === Offline Save ===
void saveOfflineLog(String location, String timeStr) {
  File file = SPIFFS.open("/offline.txt", "a+");
  if (file) {
    file.println(location + "," + timeStr);
    file.close();
  }
}

// === Upload Offline Logs ===
void uploadOfflineLogs() {
  File file = SPIFFS.open("/offline.txt", "r");
  if (!file) return;

  String base = "/users/" + String(USER_ID) + "/vehicle/companies/" + COMPANY_NAME + "/vehicle/" + VEHICLE_ID + "/history";

  while (file.available()) {
    String line = file.readStringUntil('\n');
    int lastComma = line.lastIndexOf(',');
    String location = line.substring(0, lastComma);
    String timeStr = line.substring(lastComma + 1);

    FirebaseJson history;
    history.set("location", location);
    history.set("time", timeStr);
    Firebase.pushJSON(base, history);
    delay(100);
  }

  file.close();
  SPIFFS.remove("/offline.txt");
  Serial.println("‚òÅÔ∏è Offline logs uploaded");
}
